package ${crudContext.servicePackage};

import java.io.Serializable;
import java.util.Map;

import ${crudContext.baseServicePackage}.Bs${table.className}Service;
import ${crudContext.dbPackage}.cbean.${table.className}CB;
import ${crudContext.dbPackage}.exentity.${table.className};
import ${crudContext.pagerPackage}.${table.className}Pager;

public class ${table.className}Service extends Bs${table.className}Service implements
        Serializable {

    private static final long serialVersionUID = 1L;

    protected void setupListCondition(${table.className}CB cb,
            ${table.className}Pager ${table.propertyName}Pager) {
        super.setupListCondition(cb, ${table.propertyName}Pager);

        // setup condition

        // search
        #*
        if (${table.propertyName}Pager.value != null) {
            cb.query().setValue_Equal(${table.propertyName}Pager.value);
        }
        *#

        
        #foreach( $column in ${table.getColumnList()} )
        #if(${column.javaType} == "Long")
        if (${table.propertyName}Pager.${column.propertyName} != null) {
            cb.query().set${column.methodName}_Equal(Long.parseLong(${table.propertyName}Pager.${column.propertyName}));
        }
        #elseif(${column.javaType} == "Integer")
        if (${table.propertyName}Pager.${column.propertyName} != null) {
            cb.query().set${column.methodName}_Equal(Integer.parseInt(${table.propertyName}Pager.${column.propertyName}));
        }
        #elseif(${column.javaType} == "String")
        if (${table.propertyName}Pager.${column.propertyName} != null) {
            cb.query().set${column.methodName}_Equal(${table.propertyName}Pager.${column.propertyName});
        }
        #end
        #end
        // TODO Long, Integer, String supported only.
           
    }

    protected void setupEntityCondition(${table.className}CB cb, Map<String, String> keys) {
        super.setupEntityCondition(cb, keys);

        // setup condition

    }

    protected void setupStoreCondition(${table.className} ${table.propertyName}) {
        super.setupStoreCondition(${table.propertyName});

        // setup condition

    }

    protected void setupDeleteCondition(${table.className} ${table.propertyName}) {
        super.setupDeleteCondition(${table.propertyName});

        // setup condition

    }

}
