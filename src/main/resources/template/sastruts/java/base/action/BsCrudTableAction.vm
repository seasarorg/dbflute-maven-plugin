package ${crudContext.baseActionPkg};

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import ${crudContext.basePkg}.CommonConstants;
import ${crudContext.basePkg}.CrudMessageException;
import ${crudContext.basePkg}.util.SAStrutsUtil;
import ${crudContext.dbPkg}.exentity.${table.className};
import ${crudContext.formPkg}.${table.className}Form;
import ${crudContext.pagerPkg}.${table.className}Pager;
import ${crudContext.servicePkg}.${table.className}Service;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.seasar.framework.beans.util.Beans;
import org.seasar.struts.annotation.ActionForm;
import org.seasar.struts.annotation.Execute;
import org.seasar.struts.exception.ActionMessagesException;

public class Bs${table.className}Action implements Serializable {

    private static final long serialVersionUID = 1L;

    private static final Log log = LogFactory.getLog(Bs${table.className}Action.class);

    // for list

    public List<${table.className}> ${table.propertyName}Items;

    // for edit/confirm/delete

    @ActionForm
    @Resource
    protected ${table.className}Form ${table.propertyName}Form;

    @Resource
    protected ${table.className}Service ${table.propertyName}Service;

    @Resource
    protected ${table.className}Pager ${table.propertyName}Pager;

    protected String displayList(boolean redirect) {
        // page navi
        ${table.propertyName}Items = ${table.propertyName}Service.get${table.className}List(${table.propertyName}Pager);

        // restore from pager
        Beans.copy(${table.propertyName}Pager, ${table.propertyName}Form.searchParams).excludes(
                CommonConstants.PAGER_CONVERSION_RULE).execute();

        if (redirect) {
            return "index?redirect=true";
        } else {
            return "index.jsp";
        }
    }

    @Execute(validator = false, input = "error.jsp")
    public String index() {
        return displayList(false);
    }

    @Execute(validator = false, input = "error.jsp", urlPattern = "list/{pageNumber}")
    public String list() {
        // page navi
        Beans.copy(${table.propertyName}Form, ${table.propertyName}Pager).includes("pageNumber")
                .execute();

        return displayList(false);
    }

    @Execute(validator = false, input = "error.jsp")
    public String search() {
        Beans.copy(${table.propertyName}Form.searchParams, ${table.propertyName}Pager).excludes(
                CommonConstants.PAGER_CONVERSION_RULE).execute();

        return displayList(false);
    }

    @Execute(validator = false, input = "error.jsp")
    public String reset() {
        ${table.propertyName}Pager.clear();

        return displayList(false);
    }

    @Execute(validator = false, input = "error.jsp")
    public String back() {
        return displayList(false);
    }

    @Execute(validator = false, input = "error.jsp")
    public String editagain() {
        return "edit.jsp";
    }

    #*
    @Execute(validator = false, input = "error.jsp", urlPattern = "confirmpage/{crudMode}/{id}")
    *#
    
    @Execute(validator = false, input = "error.jsp", urlPattern = "confirmpage/{crudMode}/{${table.primaryKeyPath}}")
       
    public String confirmpage() {
        if (${table.propertyName}Form.crudMode != CommonConstants.CONFIRM_MODE) {
            throw new ActionMessagesException("errors.crud_invalid_mode",
                    new Object[] { CommonConstants.CONFIRM_MODE,
                            ${table.propertyName}Form.crudMode });
        }

        load${table.className}();

        return "confirm.jsp";
    }

    @Execute(validator = false, input = "error.jsp")
    public String createpage() {
        // page navi
        ${table.propertyName}Form.initialize();
        ${table.propertyName}Form.crudMode = CommonConstants.CREATE_MODE;

        return "edit.jsp";
    }

    #*
    @Execute(validator = false, input = "error.jsp", urlPattern = "editpage/{crudMode}/{id}")
    *#
    
    @Execute(validator = false, input = "error.jsp", urlPattern = "editpage/{crudMode}/{${table.primaryKeyPath}}")
       
    public String editpage() {
        if (${table.propertyName}Form.crudMode != CommonConstants.EDIT_MODE) {
            throw new ActionMessagesException("errors.crud_invalid_mode",
                    new Object[] { CommonConstants.EDIT_MODE,
                            ${table.propertyName}Form.crudMode });
        }

        load${table.className}();

        return "edit.jsp";
    }

    @Execute(validator = false, input = "error.jsp")
    public String editfromconfirm() {
        ${table.propertyName}Form.crudMode = CommonConstants.EDIT_MODE;

        load${table.className}();

        return "edit.jsp";
    }

    @Execute(validator = true, input = "edit.jsp")
    public String confirmfromcreate() {
        return "confirm.jsp";
    }

    @Execute(validator = true, input = "edit.jsp")
    public String confirmfromupdate() {
        return "confirm.jsp";
    }

    #*
    @Execute(validator = false, input = "error.jsp", urlPattern = "deletepage/{crudMode}/{id}")
    *#
    
    @Execute(validator = false, input = "error.jsp", urlPattern = "deletepage/{crudMode}/{${table.primaryKeyPath}}")
       
    public String deletepage() {
        if (${table.propertyName}Form.crudMode != CommonConstants.DELETE_MODE) {
            throw new ActionMessagesException("errors.crud_invalid_mode",
                    new Object[] { CommonConstants.DELETE_MODE,
                            ${table.propertyName}Form.crudMode });
        }

        load${table.className}();

        return "confirm.jsp";
    }

    @Execute(validator = false, input = "error.jsp")
    public String deletefromconfirm() {
        ${table.propertyName}Form.crudMode = CommonConstants.DELETE_MODE;

        load${table.className}();

        return "confirm.jsp";
    }

    @Execute(validator = true, input = "edit.jsp")
    public String create() {
        try {
            ${table.className} ${table.propertyName} = create${table.className}();
            ${table.propertyName}Service.store(${table.propertyName});
            SAStrutsUtil.addSessionMessage("success.crud_create_${table.propertyName}");

            return displayList(true);
        } catch (ActionMessagesException e) {
            log.error(e.getMessage(), e);
            throw e;
        } catch (CrudMessageException e) {
            log.error(e.getMessage(), e);
            throw new ActionMessagesException(e.getMessageId(), e.getArgs());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new ActionMessagesException(
                    "errors.crud_failed_to_create_${table.propertyName}");
        }
    }

    @Execute(validator = true, input = "edit.jsp")
    public String update() {
        try {
            ${table.className} ${table.propertyName} = create${table.className}();
            ${table.propertyName}Service.store(${table.propertyName});
            SAStrutsUtil.addSessionMessage("success.crud_update_${table.propertyName}");

            return displayList(true);
        } catch (ActionMessagesException e) {
            log.error(e.getMessage(), e);
            throw e;
        } catch (CrudMessageException e) {
            log.error(e.getMessage(), e);
            throw new ActionMessagesException(e.getMessageId(), e.getArgs());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new ActionMessagesException(
                    "errors.crud_failed_to_update_${table.propertyName}");
        }
    }

    @Execute(validator = false, input = "error.jsp")
    public String delete() {
        if (${table.propertyName}Form.crudMode != CommonConstants.DELETE_MODE) {
            throw new ActionMessagesException("errors.crud_invalid_mode",
                    new Object[] { CommonConstants.DELETE_MODE,
                            ${table.propertyName}Form.crudMode });
        }

        try {
            ${table.className} ${table.propertyName} = ${table.propertyName}Service.get${table.className}(createKeyMap());
            if (${table.propertyName} == null) {
                // throw an exception
                throw new ActionMessagesException(
                        "errors.crud_could_not_find_${table.propertyName}",
                        new Object[] { ${table.propertyName}Form.id });
            }

            ${table.propertyName}Service.delete(${table.propertyName});
            SAStrutsUtil.addSessionMessage("success.crud_delete_${table.propertyName}");

            return displayList(true);
        } catch (ActionMessagesException e) {
            log.error(e.getMessage(), e);
            throw e;
        } catch (CrudMessageException e) {
            log.error(e.getMessage(), e);
            throw new ActionMessagesException(e.getMessageId(), e.getArgs());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new ActionMessagesException(
                    "errors.crud_failed_to_delete_${table.propertyName}");
        }
    }

    private void load${table.className}() {

        ${table.className} ${table.propertyName} = ${table.propertyName}Service.get${table.className}(createKeyMap());
        if (${table.propertyName} == null) {
            // throw an exception
            throw new ActionMessagesException(
                    "errors.crud_could_not_find_${table.propertyName}",
                    new Object[] { ${table.propertyName}Form.id });
        }

        Beans.copy(${table.propertyName}, ${table.propertyName}Form).excludes("searchParams", "mode")
                .execute();
    }

    private ${table.className} create${table.className}() {
        ${table.className} ${table.propertyName};
        if (${table.propertyName}Form.crudMode == CommonConstants.EDIT_MODE) {
            ${table.propertyName} = ${table.propertyName}Service.get${table.className}(createKeyMap());
            if (${table.propertyName} == null) {
                // throw an exception
                throw new ActionMessagesException(
                        "errors.crud_could_not_find_${table.propertyName}",
                        new Object[] { ${table.propertyName}Form.id });
            }
        } else {
            ${table.propertyName} = new ${table.className}();
        }
        Beans.copy(${table.propertyName}Form, ${table.propertyName}).excludes("searchParams", "mode")
                .execute();

        return ${table.propertyName};
    }

    private Map<String, String> createKeyMap() {
        Map<String, String> keys = new HashMap<String, String>();

        #*
        keys.put("id", ${table.propertyName}Form.id);
        *#

        
        #foreach( $column in ${table.getColumnList()} )
        #if(${column.primaryKey})
        keys.put("${column.propertyName}", ${table.propertyName}Form.${column.propertyName});
        #end
        #end
           

        return keys;
    }
}
